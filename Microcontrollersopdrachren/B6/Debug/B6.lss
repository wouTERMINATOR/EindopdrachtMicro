
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	43 c0       	rjmp	.+134    	; 0x122 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#define F_CPU 8e6
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms) {
	for(int i = 0; i < ms ; i++){
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
		_delay_ms(1);
	}
}
  ba:	08 95       	ret

000000bc <main>:

int main(void)
{
	DDRD = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
	int delayTimer = 1000;
	int boolean = 1;
	int STATE = 0;
	int isOn = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
int main(void)
{
	DDRD = 0xFF;
	int delayTimer = 1000;
	int boolean = 1;
	int STATE = 0;
  c4:	e1 2c       	mov	r14, r1
  c6:	f1 2c       	mov	r15, r1

int main(void)
{
	DDRD = 0xFF;
	int delayTimer = 1000;
	int boolean = 1;
  c8:	01 e0       	ldi	r16, 0x01	; 1
  ca:	10 e0       	ldi	r17, 0x00	; 0
}

int main(void)
{
	DDRD = 0xFF;
	int delayTimer = 1000;
  cc:	c8 ee       	ldi	r28, 0xE8	; 232
  ce:	d3 e0       	ldi	r29, 0x03	; 3
	int STATE = 0;
	int isOn = 1;
    /* Replace with your application code */
    while (1) 
    {
		if(PINC == 0b00000001){
  d0:	23 b3       	in	r18, 0x13	; 19
  d2:	21 30       	cpi	r18, 0x01	; 1
  d4:	69 f4       	brne	.+26     	; 0xf0 <main+0x34>
			if(boolean == 1){
  d6:	01 30       	cpi	r16, 0x01	; 1
  d8:	11 05       	cpc	r17, r1
  da:	a1 f4       	brne	.+40     	; 0x104 <main+0x48>
				if(STATE == 1){
  dc:	ea 94       	dec	r14
  de:	ef 28       	or	r14, r15
  e0:	51 f4       	brne	.+20     	; 0xf6 <main+0x3a>
					STATE = 0;
  e2:	e1 2c       	mov	r14, r1
  e4:	f1 2c       	mov	r15, r1
					delayTimer = 1000;
				} else {
					STATE = 1;
					delayTimer = 250;
				}
				boolean = 0;
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	10 e0       	ldi	r17, 0x00	; 0
    {
		if(PINC == 0b00000001){
			if(boolean == 1){
				if(STATE == 1){
					STATE = 0;
					delayTimer = 1000;
  ea:	c8 ee       	ldi	r28, 0xE8	; 232
  ec:	d3 e0       	ldi	r29, 0x03	; 3
  ee:	0a c0       	rjmp	.+20     	; 0x104 <main+0x48>
					delayTimer = 250;
				}
				boolean = 0;
			}	
		} else {
			boolean = 1;	
  f0:	01 e0       	ldi	r16, 0x01	; 1
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	07 c0       	rjmp	.+14     	; 0x104 <main+0x48>
			if(boolean == 1){
				if(STATE == 1){
					STATE = 0;
					delayTimer = 1000;
				} else {
					STATE = 1;
  f6:	ee 24       	eor	r14, r14
  f8:	e3 94       	inc	r14
  fa:	f1 2c       	mov	r15, r1
					delayTimer = 250;
				}
				boolean = 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	10 e0       	ldi	r17, 0x00	; 0
				if(STATE == 1){
					STATE = 0;
					delayTimer = 1000;
				} else {
					STATE = 1;
					delayTimer = 250;
 100:	ca ef       	ldi	r28, 0xFA	; 250
 102:	d0 e0       	ldi	r29, 0x00	; 0
				boolean = 0;
			}	
		} else {
			boolean = 1;	
		}
		if(isOn == 1){
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	31 f4       	brne	.+12     	; 0x114 <main+0x58>
			PORTD = 0B00000000;
 108:	12 ba       	out	0x12, r1	; 18
			wait(delayTimer);
 10a:	ce 01       	movw	r24, r28
 10c:	c8 df       	rcall	.-112    	; 0x9e <wait>
			isOn = 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	de cf       	rjmp	.-68     	; 0xd0 <main+0x14>
		}else {
			PORTD = 0B10000000;
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	82 bb       	out	0x12, r24	; 18
			wait(delayTimer);
 118:	ce 01       	movw	r24, r28
 11a:	c1 df       	rcall	.-126    	; 0x9e <wait>
			isOn = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d7 cf       	rjmp	.-82     	; 0xd0 <main+0x14>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
